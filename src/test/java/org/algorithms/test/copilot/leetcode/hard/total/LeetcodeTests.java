package org.algorithms.test.copilot.leetcode.hard.total;

import org.algorithms.test.copilot.leet.hard.total.Solution;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.Arrays;
import java.util.List;


@SpringBootTest
public class LeetcodeTests {
    @Autowired
    Solution totalCharsInTransformation;

    @Test
    void testTransformationNew() {
        String s = "bvqbowlhpfhpaddcegzxiawnprkhbvqlmqegsydbykdrxywxvtjlqkuvzasrfdwgepgkbcsxebrkeegttxugleyzytnfpsjimuxqjpjgqbxtbrpntxgxaahldwwnemzwtpgnbvhqikibmqwkxjlvklnuidgwhrxdnwjzxgazfckirtzzwacsvinisjzjyaibwamcbjkcxkdzripdrgyeewkpgofezpcbjbpbdhzltzmqffaqrqcefjwyuyimzpftumzdkazbkijezidrcabvfiltkxzzyywxogsccxkmihqwmehuicpolzxxqvyjdtsuohwthzmigprfjooframjuckvqxjboowpmbdwokzprniwejbbbzwvspufgilhylgukfqgdkiuezvfhxsbpkorbouyqapbwlbezukjhbiiykncopskkzajggslrplccqqcnogvhzjprfyuanmuuwhbndkmasesrpgwdgjyvcscmtiwyhsexvahitchwswafbftffrfpnwepijdmxlzihsnszpjvztxjvxbcbepbfhzcvmxfdibhycvzmzsnqtowvnyqoprmlpfdemyxawlahnlyihrkauraudjvkbsovqhpfvuxletqienvlcwnwdntusvwrgmlaibacdmxwarakxiqiqaaihtnfdmkrtknqrhhsebeizjwrdavzldafamwkjvtavitzoyzwavorvcbclapuzeeigndagdbpbxnexumoshtbkzlhsqetyzqfhswuxnxtrmzjaxlzjsdmdhgpjtdoogehkcanyylfsgpceosbeokdzarlogagljrzadttgwaksswbakodwjtpysrhthgmlpjixcxrfgaqcnqlchanwivxngtorsrplqmrxmaqwairjmbepggtuajfmqtbrcgczlogwkrjzhiqdbqbrcrlpovgspnmuxdqewqlbhzchfxrcxblhoozxmasnmzelzzfclsklpxexzmnenoigazshmhwkfrlkbkyerupbgedosfmvdburuqfydstnjyjpmusnfokoyjvdgnphvotckwvageasfrsknnxnbvmqqlvtyvbgijndosppsfrbzmkkgzzufzecmyqnacfyuylrewbuybecszxxovsflslzbbpapzywgahkqohvlzdgeveoqjvawwehecdlgtnseubafazduxgwbxqzponpizvsjosjddwajtpvenwbsgtqtessiacspjiehlqvjhugextkjlhgfkqiseqjhfvkewugmmwksrlxrvnrmstlklaytbqwfvzaebkbwjsqfgvwdoorepxcxbelvaobjgtdjlvqyninoehfroviegdyiilrpewvgpdipfqlizzxzzfvhqizrdcgmpbjffljpzyljupwenvybbvcgwvgqnfcfdfjlckioxkwnqiurpodtduitawsinvtbfnhbmozwukjqapeewivqmtjuqtlwygzfujfovvabmwsmmousfvcmoedejhurbxrzbdrreqymtuqzyjojjncibhelurkwajdfvdmeiabxfaqqpiqishborzzkztsfskfbbqwwathksdbrvzfbncxkmretflmddtoyxthwibtfeeowiippwoccnmpcswoqstmjdesxkhriqhftdojbsghfudrutzgduxdnrrheksjdyzrdtbkdbcrjkfhlfkvuadhiqbpnqljrqprdwmthcgstakkrmhivuirdvmwqkswjgnmqcqziwqbqxhrhhbtgagbdibjilhzuhglolxwpfywltxqfvbbvkmgpasvxaforlbgkttrnmhszehynywnwbxkshrajhymvgexcsqcfmnhiyikmzkwxtwaebajwoxeqmehyqrxyairhlsbazvkdbqhebtovualatufvauqeczcrrkyletfobzjvcauvnunnzogkdznfwstrkoicafynnbbdlutkeauqwyhqrdkgtrdbngeljgdfrvfiiampsuawxpsoosedtnnjwtdkwoykbukipvsvyefwkmlkrezsglrjnvafyyvbirnjkqgcobuhnwumbjwuyuoluyjmihghzlbrkkjewnobcuwopkdvokmqqwkpesgkgqowcxglywloojdjfhzeoihselaabpghovbwgaxwpdonuthapdunjpqldjkzovybxpzomvviutgljkpbdimbmanzyyzghlnwohqpjxupzrrhcrqzqhiupkinhjoniwoyxlgadvdlqnfwjucdcvvzmezbsqtcotbrmmjtlaihilpccrpszratqghwktpzciqexyqrbxnzfjbevsucqhmaaaedekipvhlbpscrwjwkzyodhssywlikjfmdbceehcvrhkdjxtvgtqmomaraninjzhvwzdteirgubbpochqocexfqxnqmqngezpedgpsiltsramrukxshrfhnuvsxafjfgkmqyapytiaeujczucwceyecjjbgbdmoavohqovlsunwbglroncvekqqbkuijehjbnyteoaegycbygfkfekkqnqcrktbbaksrcgyqmqnrttmhpefhzlmvoajypyrdchmyibgfbjgumrdfchliqdjjmoztvchtdzckjyzwyvfvabscxgymxosfstoagmvpvdofemlfzfkvexwrphbfxfsgumjvkisvvrpjztcxuhzqjwoatzqyiwjsvoismgadkxnejpbzhdymjbgejoboelmdpspqisukmzdytpqzbzpdhtyruutllgsipecruztupxjxnpgbcgtbhhkwcpcscjeebjzaxambflggzdhaupwjsswizkabaapecazfohbesowsyttexkqlayvnghvpcrhglqioufwxdhyqiyeedfioepddqmqzgvbvnkdbkkjujwrlfuxjfbuhicxnanjghbtnfdfxrcxdrqadmbpascwccifcpubjarrnzwtpglzowwekotstiwxlzyiesiqtbhoelbugxricrngzpxdarztndqnwtztoexcfsfffybkztsiwzarvzxesxrioahfheolpqneizdobicukwymgajilvdbxjbzzzqrjcoihgjlofofkxsbfmztousxolyfynxttrfhurvacvuqmvdmvdpvjefvwnmvcjqfleifbgntlwhynrqprngfcahzayyxrpunwtqmzczmigqpmmfyvvqciskpjxmimbdtttzfimioenelferxtcudmalkbqojuyrptrcrcgokjzromzeeyuznjprormpqtkjrzuwncumgrtpruqpvuiaseftkzhqdcywcovjytkvxkutknlymoiwknogudokqmwvmkqcxbyafpnmderopxihtuvtacnmkshhskozpysvfinvkseyhhdycmvcqmxaqbhbvzsdzlguqquqcabykcsqaeefmvgfmevsnukwrytcdxnmvpbfqekcjmccqfqswmotyxeezypgarndmalaagviyyenfruxcnwqtgyxifstfgbsdmlwtxmkoahobzemdrbwccufimsktsaluysyigwaveuezhfuqniciriejhwrgdzuvtducvkydelsfthgxizobpfciquywfqhhpsthfipenbotvizyqrvtfhkzvepscmfauhctmkhhyjjrmusjdwfuynghbwaorifkffnetqehbkapoqojkkubfxoisdouzqxejadzulqfquzmlaretcrrcjscjklfufuizrtvosthcecivbogxllpxzoihiirvderqkxhekqxaelgvippqonvwsifzoytfennzidgwmrppdlwwfcvuszmsmmqsftuhnauohniuftzbabhwdekllsszmloqjosdmptpuusnnzkrrxdyccjoxyoavkgdwbwkliaotzjlesbiahathesagnlrfezqorgyukasxnlnqlmcfokqztpcczlsvytwmrphmceyqtnvntwmmljfisyiszhacfyhrikvbkejblryhfgdwumwzstpzcgptphqmqqnfttuqjshcmmzfkopbqalbxjrscbefblkuhbzmnodgajzoqnkhzwsfhpvgokcyaqqybcwbqyrpdzqdtfiayvophivvfwgkigcqttxpigpqxvyvtfkmdgsdijxihcyiykdhxiyepcoxkpjirsdeezsjlogbguvshcasuvvpyrybcuvqbqtaddveyndsnrjdffszzhvknbsrcaeouyfqggpxzutgoxmkanvzkztnelncpxsjcimfoefqivpqrfvkgitwwwqtqisozoxuxheaumhntikfzlgvojnecympqdnbeghyktnzbbpcpfdqfnyihjchqtmgouwoevkylhzyxmmkoiywopdwfueznukqgxdxvgvqlxmptdszochifankbozlktpmstvllvkqytxywteiidxtvpdwurzuosonvmxjqgjteqmclsjxklopeiysjqjlkvabdqtmuvlalchllobcjxcxeicnvmgttkhxabkfxppktmptczytukbzmwymwmchawbohkqtajgiwbmlhvivmhdeeonngvcbgcsppbxeiooilgelxxuudkjxzzugcletjdtznqpzdalpzfhqzyrntljbnsbfpeeqvgpsrykunsmjjasnxmvmavuemnnvxcobjzvfvygzbdzyzrgxpqvarkwtlsbuiksjgsbhcneytfylsrokpcgjahljzfwusmlwydfhvqbjwdckzowqdhtgmtswsemghxhwlycaheudikfjfmpnuvfxrhfjjyeregrejcfcibtjjxnsyeohuhurrxyakklddbbruzxmjmbyhyrzqcjdazkvjdhebkfchywyqevqgpkwrfiwtssqvbzyovhaagqeekjcbzznziyymrlpbzclvttzwcpesswxvwknzpqdnzcfwwdanrvsgpfxakgchrkkguerurekcumuhlhoxhcddsvmxpnmkfddjcepsjnlxgqaqtmllpindndwwavcthnujkzfdkctnomipuctconyajkfvpwjjcwprzrzpjetmjwgumaxlriijkuanmqpuqlfofjdqxizbpdmphnavmsibtwsgpgtzqlxcldejedwigopiahgttqffdgyigxmmoinxjwsuljhtsjaifvcapgoxazoondpyvrdfodfqkuckyibcxykcxrzoxdxkwgjuafyshxaaofjxnftgjlswgtkbzyxxgawhrgliabdncnsfvmcuszkgtiogafcvtpssiqctlmaccvkqroobmnmirmtwhgcwxxuxghorsjauqkxjewjdbfamcgkakjlsryvawhsniuksmicjscbgcliccjrinjwtnghnecdpgjbkscuzrcvvdgigdrqmqocgwfxmosbpjwbjjafdnovgxhetphpydyogxuqyxxxqmyentbagcgfkufrbzqmzdljfhqxfdlrhvnavpouoeltrggaqvxaegboljjcladscdiddqihbzukbfcjgqahxlzvweqkokbpffhalieatflejpxstoseqossdrsbflrjolsksrboyewyxkvyodykugxinhgpcmqnzhlymvjmiybncvsvpvzldlytvhtqzocqugzvlrsuxnrkscscfvkpplovcikigyopogwojvwnxhguzxzrqjyduwpsojsimhogzhfmstjjyvsdnycpkjgynelbyszwddycgypflqkkobkyvxeccfcgixhoifxuehagwdkzztanhdivlsntppgcdajyyuhrtipsduanwkagmhcteousrweavrwqnncmxgdghjpcwjtaokhudyzxrxhnqwslgpoemjopsbjmuvtmfbyniuxskwuzdadvwueiohacxmfuddkkttddrqiiwsujeaeodbzguuddyzwnpycfknuojjdwayqyttpbsuqlyvbrgidmpzjnqbkagofrijikrittaxtiqqbwvtrnqutmzjfnqkashbdtisnfffihniknqeblchemzwsfhjoiotjmuolyprdfpidfpeutllwtavcdoreitatpdjififpfobnrhkowzjnbdoselynbewxagtzbetyriooufnpgjnzirjutvestaxbudtfwtlmhokedkuntejcyyzmhyeveyixyahwwmohmtuwvosqiiwokkyyiqdfiuqrylczllgbrmjpydskjblztygxgpeqfiikbsvrrmfmjjyjnmmcshmkhywnztmymcrsgpqmcvlypuydtrnyjxrlnjzkcwlzzvougctjsnzrdhqakyftwbybljakdsfmsexaxaxksvbqqvaegfestqfdsoaofaggyfhvkvhlvcbgtwdmnuwthivinencppqwxaojabpydxlcfblgysglnjoqkzywfwetjjshordjpfxawoupqpjtirmzylmpleuonnveqdtwzekqakrobsxbxqwildpuvkmlogtzzhwvuoztkspxekuvrqwzbzdzhjozqosnvmrucnspeorbrwlgbrqljqgmkuedgcjptzykyzmovpungwinhmrysehreebjtkafbglmrauhympjkarcyyldmzhkvjnkrtzdhhvtqoywsrbfiwswwzapmkbyewkbcujbyyxifbzigxsfoteelpywbjdfzvcnuwybbgndnbuenozmlpawibxklhgmcoodwipjettuhutambkyevapbhhumjhqfakarskfmjjpigrjsxlqhixovzdefqxymgnwcovfifjvubjaxoxtqmaidhtaqcsqggwxwjcsqqhlqysswpezaoarjssligvnccvbuejjbkwzxaikkcsrqmrdvmskgopzqlpxdouzuhsokcbweuwrzqcuqjxewhpmkrafivzurajyzlgsstlssdhfnjmjotyjqbnsjnfcvsptejrzicswkzvmhwumtprzhdxzqxjlnkgmociveqqrngydipsghrmntqymmqmwxrlovgxtepxfxlojwpmlzmenslyljtptkndyrjuikjrrurazgwgjginlfyuwmkogriokpxhbablkdwwnxxpjokfnlimmbeausuukteotoypwakqzeborvfwiolyvvxniukzwfzvubuvayzkhldwmbzpwjzmooryyxotosaaaecoivyqvqzqrylfdugcubmasktfpxpsvkqrqntipxlqpbjgpjootfvxbycvdolnrmcgvdkyjlyqjgozirijcwafdajnrokkubafhujulkfmqsewbllzqhkutsardfvkhswcpflausmcgjlhgskdsoppylvgulxvuquaehvssuoxfgqvidlmmocmbuhmzpmetmoewsokxpcnybnrmkpjxgebuydnftz";
        int t = 50_000_000;
        List<Integer> nums = Arrays.asList(23, 20, 4, 11, 4, 24, 13, 25, 12, 21, 17, 7, 6, 21, 12, 11, 22, 25, 22, 16, 19, 8, 16, 18, 19, 16);
        int expected = totalCharsInTransformation.lengthAfterTransformationsString(s, t, nums);
        System.out.println("Expected: " + expected);
        int result = totalCharsInTransformation.lengthAfterTransformations(s, t, nums);
        Assertions.assertEquals(expected, result);
    }

    @Test
    void testTransformationNewMulti() {
        String s = "abcdefghijklmnopqrstuvwxy";
        int t = 100_000;
        List<Integer> nums = Arrays.asList(1, 1, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 9, 25);
        int expected = totalCharsInTransformation.lengthAfterTransformationsString(s, t, nums);
        System.out.println("Expected: " + expected);
        int result = totalCharsInTransformation.lengthAfterTransformations(s, t, nums);
        Assertions.assertEquals(expected, result);
    }

    @Test
    void testTransformation() {
        String s = "azbk";
        int t = 1;
        List<Integer> nums = Arrays.asList(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2);
        int expected = totalCharsInTransformation.lengthAfterTransformationsString(s, t, nums);
        System.out.println("Expected: " + expected);
        int result = totalCharsInTransformation.lengthAfterTransformations(s, t, nums);
        Assertions.assertEquals(expected, result);
    }


    @Test
    void testMatrixSimple() {
        String s = "abcyy";
        int t = 3;
        List<Integer> nums = Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2);
        int expected = totalCharsInTransformation.lengthAfterTransformationsString(s, t, nums);
        System.out.println("Expected: " + expected);
        int result = totalCharsInTransformation.lengthAfterTransformations(s, t, nums);
        Assertions.assertEquals(expected, result);
    }
}